import ctypes
import time
from datetime import datetime, timedelta

import cv2
import pyautogui

from screen_grabber import Grabber
from simple_ocr_utils import find_and_create_card_img, detect_dominant_color, find_template_coordinates

ATTRIBUTE_COLORS_TO_CHOOSE = ["red", "violet"]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
pyautogui.PAUSE = 0.15
pyautogui.FAILSAFE = True

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
MOUSEEVENTF_LEFTDOWN = 0x0002
MOUSEEVENTF_LEFTUP = 0x0004
MOUSEEVENTF_RIGHTDOWN = 0x0008
MOUSEEVENTF_RIGHTUP = 0x0010

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
ITEM_POSITIONS = [
    (1030, 700),  # –¢–æ—á–∫–∞ 1
    (1777, 700),  # –¢–æ—á–∫–∞ 2
    (2152, 295)  # –¢–æ—á–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
]

# —Ä–µ–≥–∏–æ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
CARD_COLOR_REGION = (55, 45, 94, 62)

grabber = Grabber()

def send_mouse_event(x, y, dwFlags, button='left'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –º—ã—à–∏"""
    ctypes.windll.user32.SetCursorPos(x, y)
    if button == 'left':
        ctypes.windll.user32.mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)
        time.sleep(0.05)
        ctypes.windll.user32.mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)
    elif button == 'right':
        ctypes.windll.user32.mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0)
        time.sleep(0.05)
        ctypes.windll.user32.mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0)


def robust_click(x, y, button='left', duration=0.5, retries=5, delay_before=0.5, delay_after=0.5):
    """–ù–∞–¥–µ–∂–Ω—ã–π –∫–ª–∏–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    for attempt in range(1, retries + 1):
        try:
            time.sleep(delay_before)

            # –ü–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            pyautogui.moveTo(x, y, duration=duration)
            time.sleep(0.1)

            # –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–ª–∏–∫
            send_mouse_event(x, y, 0, button)

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            time.sleep(delay_after)

            print(f"‚úÖ –ö–ª–∏–∫ –Ω–∞ ({x}, {y}) [–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}]")
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ ({x}, {y}): {str(e)}")
            time.sleep(0.5)

    print(f"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫ –Ω–∞ ({x}, {y})")
    return False


def is_target_color(rgb):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏–∫—Å–µ–ª—å –∫—Ä–∞—Å–Ω—ã–º –∏–ª–∏ –∂–µ–ª—Ç—ã–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'red', 'yellow' –∏–ª–∏ None.
    """
    r, g, b = rgb

    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–Ω–æ–≥–æ
    if r > 160 and g < 100 and b < 100:
        return 'red'

    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∂–µ–ª—Ç–æ–≥–æ
    if r > 180 and g > 160 and b < 120:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∂–µ–ª—Ç—ã–π, –∞ –Ω–µ –∑–µ–ª–µ–Ω—ã–π
        if r - g < 50 and g - b > 60:
            return 'yellow'

    return None


def analyze_color_with_delay(x, y, delay=5):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    print(f"–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–∞ –Ω–∞ ({x}, {y}) –≤ —Ç–µ—á–µ–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥...")
    start_time = time.time()
    detected_colors = []

    while time.time() - start_time < delay:
        try:
            color = pyautogui.pixel(x, y)
            color_type = is_target_color(color)
            if color_type:
                detected_colors.append(color_type)
            time.sleep(0.5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
        except Exception:
            time.sleep(0.5)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —Ü–≤–µ—Ç
    if detected_colors:
        from collections import Counter
        color_counter = Counter(detected_colors)
        predominant_color = color_counter.most_common(1)[0][0]
        print(f"–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —Ü–≤–µ—Ç: {predominant_color} (–≤—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π: {len(detected_colors)})")
        return predominant_color
    return None


def move_mouse_to(x, y, duration=0.5, delay_after=0.5):
    pyautogui.moveTo(x, y, duration=duration)
    time.sleep(delay_after)


def get_red_card_attribute_colors(image_path: str, img):
    coords = find_template_coordinates(image_path, "template_images/fate_attrs_template.png")
    left_ = coords["top_left"]
    right_ = coords["bottom_right"]
    left_ = right_[0] + 5, left_[1]
    right_ = right_[0] + 35, right_[1]
    fate = detect_dominant_color(img, left_ + right_)
    if fate not in ATTRIBUTE_COLORS_TO_CHOOSE:
        fate = None

    coords = find_template_coordinates(image_path, "template_images/talante_attrs_template.png")
    left_ = coords["top_left"]
    right_ = coords["bottom_right"]
    left_ = right_[0] + 5, left_[1]
    right_ = right_[0] + 35, right_[1]
    talante = detect_dominant_color(img, left_ + right_)
    if talante not in ATTRIBUTE_COLORS_TO_CHOOSE:
        talante = None

    return fate, talante

def get_yellow_card_attribute_colors(image_path: str, img):
    coords = find_template_coordinates(image_path, "template_images/fate_attrs_template.png")
    left_ = coords["top_left"]
    right_ = coords["bottom_right"]
    left_ = right_[0] + 5, left_[1]
    right_ = right_[0] + 35, right_[1]
    fate = detect_dominant_color(img, left_ + right_)
    return fate

def select_items():
    """–í—ã–±–∏—Ä–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–µ –∏–ª–∏ –∂–µ–ª—Ç—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
    target_items_selected = 0
    round_count = 0
    start_time = datetime.now()
    timeout = timedelta(seconds=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç

    print("\n--- –ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---")
    print(f"–¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timeout}")

    # images = [
    #     "images/1_left_yellow.png",
    #     "images/2_right_yellow.png",
    #     "images/left_red_1.png",
    #     "images/right_red_2.png",
    # ]
    # images = itertools.cycle(images)

    while datetime.now() - start_time < timeout:
        time.sleep(1)

        msg = ""
        try:
            left_fate_color, left_talantes_color, right_fate_color, right_talantes_color = [None] * 4
            left_card_priority_points, right_card_priority_points = 0, 0

            move_mouse_to(1030, 700) # left card
            img_path = find_and_create_card_img(grabber.screenshot())
            if not img_path:
                continue

            round_count += 1
            time_remaining = timeout - (datetime.now() - start_time)
            print(f"\n--- –†–∞—É–Ω–¥ {round_count} (–æ—Å—Ç–∞–ª–æ—Å—å: {time_remaining}) ---")

            img = cv2.imread(img_path)
            left_card_color = detect_dominant_color(img, CARD_COLOR_REGION)
            if left_card_color == "red":
                msg = "–°–ª–µ–≤–∞ –∫—Ä–∞—Å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
                left_fate_color, left_talantes_color = get_red_card_attribute_colors(img_path, img)
            elif left_card_color == "yellow":
                msg = "–°–ª–µ–≤–∞ –∂—ë–ª—Ç—ã–π –ø—Ä–µ–¥–º–µ—Ç"
                left_fate_color = get_yellow_card_attribute_colors(img_path, img)
            else:
                pass

            if left_fate_color == "violet":
                left_card_priority_points += 2
                print("–°–ª–µ–≤–∞ violet —Å—É–¥—å–±–∞")
            elif left_fate_color == "red":
                left_card_priority_points += 1
                print("–°–ª–µ–≤–∞ red —Å—É–¥—å–±–∞")

            if left_talantes_color == "violet":
                left_card_priority_points += 2
                print("–°–ª–µ–≤–∞ violet —Ç–∞–ª–∞–Ω—Ç—ã")
            elif left_talantes_color == "red":
                left_card_priority_points += 1
                print("–°–ª–µ–≤–∞ red —Ç–∞–ª–∞–Ω—Ç—ã")

            move_mouse_to(1777, 700) # right card
            img_path = find_and_create_card_img(grabber.screenshot())
            # img_path = find_and_create_card_img(next(images))
            img = cv2.imread(img_path)
            right_card_color = detect_dominant_color(img, CARD_COLOR_REGION)
            if right_card_color == "red":
                msg += ", –°–ø—Ä–∞–≤–∞ –∫—Ä–∞—Å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
                right_fate_color, right_talantes_color = get_red_card_attribute_colors(img_path, img)
            elif right_card_color == "yellow":
                msg += ", –°–ø—Ä–∞–≤–∞ –∂—ë–ª—Ç—ã–π –ø—Ä–µ–¥–º–µ—Ç"
                right_fate_color = get_yellow_card_attribute_colors(img_path, img)
            else:
                pass

            if right_fate_color == "violet":
                right_card_priority_points += 2
                print("–°–ø—Ä–∞–≤–∞ violet —Å—É–¥—å–±–∞")
            elif right_fate_color == "red":
                right_card_priority_points += 1
                print("–°–ø—Ä–∞–≤–∞ red —Å—É–¥—å–±–∞")

            if right_talantes_color == "violet":
                right_card_priority_points += 2
                print("–°–ø—Ä–∞–≤–∞ violet —Ç–∞–ª–∞–Ω—Ç—ã")
            elif right_talantes_color == "red":
                print("–°–ø—Ä–∞–≤–∞ red —Ç–∞–ª–∞–Ω—Ç—ã")

            print(msg if msg else "–§–∏–≥–Ω—è —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞")

            print(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–µ–≤–æ/–ø—Ä–∞–≤–æ: {left_card_priority_points}/{right_card_priority_points}")
            if left_card_priority_points == 0 and right_card_priority_points == 0:
                print("–§–∏–≥–Ω—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º")
                robust_click(ITEM_POSITIONS[2][0], ITEM_POSITIONS[2][1], button='left')
            elif left_card_priority_points == right_card_priority_points:
                print(f"–†–µ–π—Ç–∏–Ω–≥ –æ–¥–∏–Ω–∞–∫–æ–≤, –±–µ—Ä—ë–º –ª–µ–≤—É—é")
                robust_click(ITEM_POSITIONS[0][0], ITEM_POSITIONS[0][1], button='left')
                target_items_selected += 1
            elif left_card_priority_points > right_card_priority_points:
                print("–ë–µ—Ä—ë–º –ª–µ–≤—É—é")
                robust_click(ITEM_POSITIONS[0][0], ITEM_POSITIONS[0][1], button='left')
                target_items_selected += 1
            else:
                print("–ë–µ—Ä—ë–º –ø—Ä–∞–≤—É—é")
                robust_click(ITEM_POSITIONS[1][0], ITEM_POSITIONS[1][1], button='left')
                target_items_selected += 1

            # # –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ç–æ—á–∫—É
            # print("\n–ê–Ω–∞–ª–∏–∑ —Ç–æ—á–∫–∏ 1:")
            # point1_color_type = analyze_color_with_delay(ITEM_POSITIONS[0][0], ITEM_POSITIONS[0][1], 5)
            #
            # print("\n–ê–Ω–∞–ª–∏–∑ —Ç–æ—á–∫–∏ 2:")
            # point2_color_type = analyze_color_with_delay(ITEM_POSITIONS[1][0], ITEM_POSITIONS[1][1], 5)
            #
            # print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞: –¢–æ—á–∫–∞1={point1_color_type}, –¢–æ—á–∫–∞2={point2_color_type}")
            #
            # # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–∞
            # if point1_color_type and point2_color_type:
            #     # –ï—Å–ª–∏ –æ–±–µ —Ç–æ—á–∫–∏ –∏–º–µ—é—Ç —Ü–µ–ª–µ–≤–æ–π —Ü–≤–µ—Ç - –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
            #     robust_click(ITEM_POSITIONS[0][0], ITEM_POSITIONS[0][1], button='left')
            #     target_items_selected += 1
            #     print(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞ 1 (–æ–±–∞ —Ü–µ–ª–µ–≤—ã–µ) - –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {target_items_selected}")
            # elif point1_color_type:
            #     # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ü–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ
            #     robust_click(ITEM_POSITIONS[0][0], ITEM_POSITIONS[0][1], button='left')
            #     target_items_selected += 1
            #     print(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞ 1 - –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {target_items_selected}")
            # elif point2_color_type:
            #     # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ü–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–µ
            #     robust_click(ITEM_POSITIONS[1][0], ITEM_POSITIONS[1][1], button='left')
            #     target_items_selected += 1
            #     print(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞ 2 - –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {target_items_selected}")
            # else:
            #     # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            #     robust_click(ITEM_POSITIONS[2][0], ITEM_POSITIONS[2][1], button='left')
            #     print("–¶–µ–ª–µ–≤—ã–µ —Ü–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–≤–µ—Ç–∞: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            robust_click(ITEM_POSITIONS[2][0], ITEM_POSITIONS[2][1], button='left')
            print("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if target_items_selected >= 4:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–æ {target_items_selected} –ø—Ä–µ–¥–º–µ—Ç–æ–≤!")
    else:
        print(f"üõë –¢–∞–π–º–∞—É—Ç! –í—ã–±—Ä–∞–Ω–æ —Ç–æ–ª—å–∫–æ {target_items_selected} –∏–∑ 4 –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

    return target_items_selected


def run_game_session():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
    try:
        # –®–∞–≥ 1: –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        print("\n" + "=" * 50)
        print("–ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ò–ì–†–û–í–û–ô –°–ï–°–°–ò–ò")
        print("=" * 50 + "\n")
        print("–°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 600 —Å–µ–∫—É–Ω–¥...")
        time.sleep(600)

        # –®–∞–≥ 1.2: –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
        robust_click(2208, 1398, button='left', duration=0.5, delay_before=1)
        print("–®–∞–≥ 1.2: –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω")

        # –®–∞–≥ 1.3: –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–ø–æ—Ä
        robust_click(2390, 449, button='right', duration=0.5, delay_before=1.2)
        print("–®–∞–≥ 1.3: –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–ø–æ—Ä")

        # –®–∞–≥ 1.4: –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
        robust_click(2208, 1398, button='left', duration=0.5, delay_before=1.5)
        print("–®–∞–≥ 1.4: –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω")

        # –®–∞–≥ 1.5: –ö–ª–∏–∫ –ø–æ –±–∞—à–Ω–µ –Ω–∞ –º–∏–Ω–∏-–∫–∞—Ä—Ç–µ (–æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ!)
        robust_click(80, 1207, button='left', duration=0.5, delay_before=3, retries=7)
        print("–®–∞–≥ 1.5: –ë–∞—à–Ω—è –Ω–∞ –º–∏–Ω–∏ –∫–∞—Ä—Ç–µ")

        # –®–∞–≥ 1.6: –ê—Ç–∞–∫–∞ –±–∞—à–Ω–∏
        robust_click(1906, 860, button='right', duration=0.5, delay_before=1.8)
        print("–®–∞–≥ 1.6: –ê—Ç–∞–∫–∞ –±–∞—à–Ω–∏")

        # –®–∞–≥ 2.1: –û–∂–∏–¥–∞–Ω–∏–µ 15 –º–∏–Ω—É—Ç
        print("–û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç...")
        time.sleep(300)

        # –®–∞–≥ 2.2: –ê—Ç–∞–∫–∞ —Ç—Ä–æ–Ω–∞
        robust_click(1527, 785, button='right', duration=0.5, delay_before=1)
        print("–®–∞–≥ 2.2: –ê—Ç–∞–∫–∞ —Ç—Ä–æ–Ω–∞")

        # –®–∞–≥ 2.3: –û–∂–∏–¥–∞–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã
        print("–û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç–∞...")
        time.sleep(60)

        # –®–∞–≥ 2.4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã
        robust_click(1337, 1090, button='left', duration=0.5, delay_before=1.5)
        print("–®–∞–≥ 2.4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã")

        # –®–∞–≥ 3.1: –ü–æ–∏—Å–∫ –∞—Ä–µ–Ω—ã (–æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ!)
        robust_click(152, 1267, button='left', duration=0.6, delay_before=2, retries=7)
        print("–®–∞–≥ 3.1: –õ–µ–≤—ã–π –∫–ª–∏–∫ –Ω–∞ (152, 1267)")

        # –®–∞–≥ 3.2: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã MPC –ê—Ä–µ–Ω—ã
        robust_click(1566, 767, button='left', duration=0.8, delay_before=1)
        print("–®–∞–≥ 3.2: –ú–ü–° –ê—Ä–µ–Ω—ã")

        # –®–∞–≥ 3.3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
        robust_click(1824, 897, button='left', duration=0.3, delay_before=1)
        print("–®–∞–≥ 3.3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞")

        # –®–∞–≥ 3.4-3.7: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        selected_count = select_items()
        print(f"--- –í—ã–±—Ä–∞–Ω–æ {selected_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---")

        # –®–∞–≥ 3.8: –í—ã—Ö–æ–¥ –∏–∑ –∞—Ä–µ–Ω—ã
        time.sleep(15)
        robust_click(1281, 414, button='left', duration=0.8)
        print("–®–∞–≥ 3.8: –í—ã—Ö–æ–¥ –∏–∑ –∞—Ä–µ–Ω—ã")

        # –®–∞–≥ 3.9: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
        time.sleep(15)
        robust_click(1088, 836, button='left', duration=0.7)
        print("–®–∞–≥ 3.9: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ –∞—Ä–µ–Ω—ã")

        # –®–∞–≥ 3.10: –ü–æ–∏—Å–∫ –ú–ü–° —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        time.sleep(15)
        robust_click(1454, 1214, button='left', duration=0.9)
        print("–®–∞–≥ 3.10: –ü–æ–∏—Å–∫ –ú–ü–° —Ä–µ—Å—Ç–∞—Ä—Ç–∞")

        # –®–∞–≥ 3.11: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
        time.sleep(5)
        robust_click(1095, 842, button='left', duration=0.4)
        print("–®–∞–≥ 3.11: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã—Ö–æ–¥")

        # –®–∞–≥ 3.12: –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        time.sleep(5)
        robust_click(1435, 481, button='left', duration=0.4)
        print("–®–∞–≥ 3.12: –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")

        # –®–∞–≥ 3.13: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
        time.sleep(5)
        robust_click(2301, 1292, button='left', duration=0.4)
        print("–®–∞–≥ 3.13: –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")

        print("‚úÖ –ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True

    except pyautogui.FailSafeException:
        print("‚õî –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: –∫—É—Ä—Å–æ—Ä –º—ã—à–∏ –≤ —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞")
        return False
    except Exception as e:
        print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏: {str(e)}")
        return False


def main(retry_game = 30):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
    session_count = 0
    successful_sessions = 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if ctypes.windll.shell32.IsUserAnAdmin() == 0:
        print("‚ö†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏!")
        print("‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã —Å–±–æ–∏.")

    while session_count < retry_game:
        session_count += 1
        print(f"\n{'=' * 50}")
        print(f"–ó–ê–ü–£–°–ö –°–ï–°–°–ò–ò {session_count}/{retry_game}")
        print(f"{'=' * 50}\n")

        # –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        success = run_game_session()
        if success:
            successful_sessions += 1

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è - –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
        if session_count < retry_game:
            print(f"\n‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π ({session_count + 1}/{retry_game})...")
            time.sleep(10)

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'=' * 50}")
    print(f"–í–°–ï –°–ï–°–°–ò–ò –ó–ê–í–ï–†–®–ï–ù–´")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {successful_sessions}/{retry_game}")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {retry_game - successful_sessions}/{retry_game}")
    print(f"{'=' * 50}")


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    main(retry_game=30)